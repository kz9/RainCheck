{
  "_from": "imap-simple",
  "_id": "imap-simple@5.0.0",
  "_inBundle": false,
  "_integrity": "sha512-/wLRwy8tmKdzacVDOZUeD05GkqIax38tEFwAToFB2Jhb7zfmGdaxzYWOvPZi2t6kumrjNhSyt5BstCemKzcV+A==",
  "_location": "/imap-simple",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "imap-simple",
    "fetchSpec": "latest",
    "name": "imap-simple",
    "raw": "imap-simple",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/imap-simple/-/imap-simple-5.0.0.tgz",
  "_shasum": "cd186a000219356ea870ffda656083592d74fdf8",
  "_shrinkwrap": null,
  "_spec": "imap-simple",
  "_where": "/home/taru/projs/RainCheck/backend",
  "bugs": {
    "url": "https://github.com/chadxz/imap-simple/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Brian Beaird"
    },
    {
      "name": "Johannes Brodwall",
      "email": "johannes@brodwall.com"
    },
    {
      "name": "Bruce V. Schwartz",
      "email": "bruce@z2a.org"
    },
    {
      "name": "Chad McElligott",
      "email": "chad.mcelligott@gmail.com"
    },
    {
      "name": "Dominik Beste",
      "email": "dominik.beste@gmail.com"
    },
    {
      "name": "Erik Bernhardsson",
      "email": "erikbern@spotify.com"
    },
    {
      "name": "Ilari Aarnio"
    },
    {
      "name": "Aravindo Wingeier",
      "email": "synox.github@dubgo.com"
    },
    {
      "name": "John Kawakami",
      "email": "jkawakami@ebullient.net"
    },
    {
      "name": "Julian Bilcke",
      "email": "julian.bilcke@gmail.com"
    },
    {
      "name": "Maxiem",
      "email": "maxiemgeldhof@msn.com"
    },
    {
      "name": "Nate Watson",
      "email": "watsonn2013@my.fit.edu"
    },
    {
      "name": "Robert Vulpe",
      "email": "nytr0gen.george@gmail.com"
    },
    {
      "name": "Tuomas Tanner"
    },
    {
      "name": "u2ros",
      "email": "urbernik@gmail.com"
    }
  ],
  "dependencies": {
    "iconv-lite": "~0.4.13",
    "imap": "^0.8.18",
    "nodeify": "^1.0.0",
    "quoted-printable": "^1.0.0",
    "utf8": "^2.1.1",
    "uuencode": "0.0.4"
  },
  "deprecated": false,
  "description": "Wrapper over node-imap, providing a simpler api for common use cases",
  "devDependencies": {
    "chai": "^3.5.0",
    "hoodiecrow-imap": "^2.1.0",
    "istanbul": "^0.4.5",
    "jscs": "^3.0.7",
    "jshint": "^2.9.3",
    "mocha": "^3.1.0"
  },
  "engines": {
    "node": ">=6"
  },
  "homepage": "https://github.com/chadxz/imap-simple#readme",
  "keywords": [
    "imap",
    "node-imap"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "imap-simple",
  "optionalDependencies": {},
  "readme": "# imap-simple\n\nA library providing a simpler interface for common use cases of [node-imap][], a robust imap client for node.js.\n\n**Warning**: This library is missing a great deal of functionality from node-imap. If you have functionality you would\nlike to see, we're accepting pull requests!\n\n### Examples\n\n#### Retrieve the subject lines of all unread email\n\n```js\nvar imaps = require('imap-simple');\n\nvar config = {\n    imap: {\n        user: 'your@email.address',\n        password: 'yourpassword',\n        host: 'imap.gmail.com',\n        port: 993,\n        tls: true,\n        authTimeout: 3000\n    }\n};\n\nimaps.connect(config).then(function (connection) {\n\n    return connection.openBox('INBOX').then(function () {\n        var searchCriteria = [\n            'UNSEEN'\n        ];\n\n        var fetchOptions = {\n            bodies: ['HEADER', 'TEXT'],\n            markSeen: false\n        };\n\n        return connection.search(searchCriteria, fetchOptions).then(function (results) {\n            var subjects = results.map(function (res) {\n                return res.parts.filter(function (part) {\n                    return part.which === 'HEADER';\n                })[0].body.subject[0];\n            });\n\n            console.log(subjects);\n            // =>\n            //   [ 'Hey Chad, long time no see!',\n            //     'Your amazon.com monthly statement',\n            //     'Hacker Newsletter Issue #445' ]\n        });\n    });\n});\n```\n\n#### Retrieve Body Content\n```js\nvar imaps = require('imap-simple');\nconst _ = require('lodash');\n\nvar config = {\n    imap: {\n        user: 'your@email.address',\n        password: 'yourpassword',\n        host: 'imap.gmail.com',\n        port: 993,\n        tls: true,\n        authTimeout: 3000\n    }\n};\n\nimaps.connect(config).then(function (connection) {\n    return connection.openBox('INBOX').then(function () {\n        var searchCriteria = ['1:5'];\n        var fetchOptions = {\n            bodies: ['HEADER', 'TEXT'],\n        };\n        return connection.search(searchCriteria, fetchOptions).then(function (messages) {\n            messages.forEach(function (item) {\n                var all = _.find(item.parts, { \"which\": \"TEXT\" })\n                var html = (Buffer.from(all.body, 'base64').toString('ascii'));\n                console.log(html)\n            });\n        });\n    });\n});\n\n```\n\n#### Usage of Mailparser in combination with imap-simple\n```js\nvar imaps = require('imap-simple');\nconst simpleParser = require('mailparser').simpleParser;\nconst _ = require('lodash');\n\nvar config = {\n    imap: {\n        user: 'your@email.address',\n        password: 'yourpassword',\n        host: 'imap.gmail.com',\n        port: 993,\n        tls: true,\n        authTimeout: 3000\n    }\n};\n\nimaps.connect(config).then(function (connection) {\n    return connection.openBox('INBOX').then(function () {\n        var searchCriteria = ['1:5'];\n        var fetchOptions = {\n            bodies: ['HEADER', 'TEXT', ''],\n        };\n        return connection.search(searchCriteria, fetchOptions).then(function (messages) {\n            messages.forEach(function (item) {\n                var all = _.find(item.parts, { \"which\": \"\" })\n                var id = item.attributes.uid;\n                var idHeader = \"Imap-Id: \"+id+\"\\r\\n\";\n                simpleParser(idHeader+all.body, (err, mail) => {\n                    // access to the whole mail object\n                    console.log(mail.subject)\n                    console.log(mail.html)\n                });\n            });\n        });\n    });\n});\n```\n\n#### Download all attachments from all unread email since yesterday\n\n```js\nvar imaps = require('imap-simple');\n\nvar config = {\n    imap: {\n        user: 'your@email.address',\n        password: 'yourpassword',\n        host: 'imap.gmail.com',\n        port: 993,\n        tls: true,\n        authTimeout: 3000\n    }\n};\n\nimaps.connect(config).then(function (connection) {\n\n    connection.openBox('INBOX').then(function () {\n\n        // Fetch emails from the last 24h\n        var delay = 24 * 3600 * 1000;\n        var yesterday = new Date();\n        yesterday.setTime(Date.now() - delay);\n        yesterday = yesterday.toISOString();\n        var searchCriteria = ['UNSEEN', ['SINCE', yesterday]];\n        var fetchOptions = { bodies: ['HEADER.FIELDS (FROM TO SUBJECT DATE)'], struct: true };\n\n        // retrieve only the headers of the messages\n        return connection.search(searchCriteria, fetchOptions);\n    }).then(function (messages) {\n\n        var attachments = [];\n\n        messages.forEach(function (message) {\n            var parts = imaps.getParts(message.attributes.struct);\n            attachments = attachments.concat(parts.filter(function (part) {\n                return part.disposition && part.disposition.type.toUpperCase() === 'ATTACHMENT';\n            }).map(function (part) {\n                // retrieve the attachments only of the messages with attachments\n                return connection.getPartData(message, part)\n                    .then(function (partData) {\n                        return {\n                            filename: part.disposition.params.filename,\n                            data: partData\n                        };\n                    });\n            }));\n        });\n\n        return Promise.all(attachments);\n    }).then(function (attachments) {\n        console.log(attachments);\n        // =>\n        //    [ { filename: 'cats.jpg', data: Buffer() },\n        //      { filename: 'pay-stub.pdf', data: Buffer() } ]\n    });\n});\n```\n\n### Append a message to your drafts folder\n\n```js\nvar imaps = require('imap-simple');\n\nvar config = {\n    imap: {\n        user: 'your@email.address',\n        password: 'yourpassword',\n        host: 'imap.gmail.com',\n        port: 993,\n        tls: true,\n        authTimeout: 3000\n    }\n};\n\nimaps.connect(config).then(function (connection) {\n  const message = `Content-Type: text/plain\nTo: jhannes@gmail.com\nSubject: Hello world\n\nHi\nThis is a test message\n`;\n  connection.append(message.toString(), {mailbox: 'Drafts', flags: '\\\\Draft'});\n});\n```\n\n### Open messages and delete them\n\n```js\n\nimaps.connect(config).then(function (connection) {        \n    connection.openBox('INBOX').then(function () {\n    \n        var searchCriteria = ['ALL'];\n        var fetchOptions = { bodies: ['TEXT'], struct: true };\n        return connection.search(searchCriteria, fetchOptions);\n\n    //Loop over each message\n    }).then(function (messages) {\n        let taskList = messages.map(function (message) {\n            return new Promise((res, rej) => {\n                var parts = imaps.getParts(message.attributes.struct); \n                parts.map(function (part) {\n                    return connection.getPartData(message, part)\n                    .then(function (partData) {\n                        \n                        //Display e-mail body\n                        if (part.disposition == null && part.encoding != \"base64\"){\n                            console.log(partData);\n                        }\n\n                        //Mark message for deletion\n                        connection.addFlags(message.attributes.uid, \"\\Deleted\", (err) => {\n                            if (err){\n                                console.log('Problem marking message for deletion');\n                                rej(err);\n                            }\n\n                            res(); //Final resolve\n                        })\n                    });\n                });\n            });    \n        })\n\n        return Promise.all(taskList).then(() => {\n            connection.imap.closeBox(true, (err) => { //Pass in false to avoid delete-flagged messages being removed\n                if (err){\n                    console.log(err);\n                }\n            });\n            connection.end();\n        });\n    });\n});\n```\n\n\n### delete messages by uid \n\n```js\nimaps.connect(config).then(connection => {\n\n    return connection.openBox('INBOX')\n        .then(() => connection.search(['ALL'], {bodies: ['HEADER']}))\n        .then( messages => {\n\n            // select messages from bob\n            const uidsToDelete = messages\n                .filter( message => {\n                    return message.parts\n                    .filter( part => part.which === 'HEADER')[0].body.to[0] === 'bob@example.com';\n                })\n                .map(message => message.attributes.uid);\n\n            return connection.deleteMessage(uidsToDelete);\n        });\n});\n```\n\n## API\n\n### Exported module\n- **connect**(<*object*> options, [<*function*> callback]) - *Promise* - Main entry point. Connect to an Imap server.\nUpon successfully connecting to the Imap server, either calls the provided callback with signature `(err, connection)`,\nor resolves the returned promise with `connection`, where `connection` is an instance of *ImapSimple*. If the connection\ntimes out, either the callback will be called with the `err` property set to an instance of *ConnectionTimeoutError*, or\nthe returned promise will be rejected with the same. Valid `options` properties are:\n\n    - **imap**: Options to pass to node-imap constructor 1:1\n    - **connectTimeout**: Time in milliseconds to wait before giving up on a connection attempt. *(Deprecated: please\n    use `options.imap.authTimeout` instead)*\n\n- **errors.ConnectionTimeoutError**(<*number*> timeout) - *ConnectionTimeoutError* - Error thrown when a connection\nattempt has timed out.\n\n- **getParts**(<*Array*> struct) - *Array* - Given the `message.attributes.struct`, retrieve a flattened array of `parts`\nobjects that describe the structure of the different parts of the message's body. Useful for getting a simple list to\niterate for the purposes of, for example, finding all attachments.\n\n- **ImapSimple**(<*object*> imap) - *ImapSimple* - constructor for creating an instance of ImapSimple. Mostly used for\ntesting.\n\n### ImapSimple class\n\n- **addFlags**(<*mixed*> uid, <*string*> flag, [<*function*> callback]) - *Promise* - Adds the provided\nflag(s) to the specified message(s). `uid` is the *uid* of the message you want to add the flag to or an array of\n*uids*. `flag` is either a string or array of strings indicating the flags to add. When completed, either calls\nthe provided callback with signature `(err)`, or resolves the returned promise.\n\n- **addMessageLabel**(<*mixed*> source, <*mixed*> label, [<*function*> callback]) - *Promise* - Adds the provided\nlabel(s) to the specified message(s). `source` corresponds to a node-imap *MessageSource* which specifies the messages\nto be moved. `label` is either a string or array of strings indicating the labels to add. When completed, either calls\nthe provided callback with signature `(err)`, or resolves the returned promise.\n\n- **append**(<*mixed*> message, [<*object*> options], [<*function*> callback]) - *Promise* - Appends the argument\nmessage to the currently open mailbox or another mailbox. `message` is a RFC-822 compatible MIME message. Valid `options`\nare *mailbox*, *flags* and *date*. When completed, either calls the provided callback with signature `(err)`, or resolves\nthe returned promise.\n\n- **delFlags**(<*mixed*> uid, <*string*> flag, [<*function*> callback]) - *Promise* - Removes the provided\nflag(s) from the specified message(s). `uid` is the *uid* of the message you want to remove the flag from or an array of\n*uids*. `flag` is either a string or array of strings indicating the flags to remove. When completed, either calls\nthe provided callback with signature `(err)`, or resolves the returned promise.\n\n- **end**() - *undefined* - Close the connection to the imap server.\n\n- **getBoxes**([<*function*> callback]) - *Promise* - Returns the full list of mailboxes (folders). Upon success, either\nthe provided callback will be called with signature `(err, boxes)`, or the returned promise will be resolved with `boxes`.\n`boxes` is the exact object returned from the node-imap *getBoxes()* result.\n\n- **getPartData**(<*object*> message, <*object*> part, [<*function*> callback]) - *Promise* - Downloads part data\n(which is either part of the message body, or an attachment). Upon success, either the provided callback will be called\nwith signature `(err, data)`, or the returned promise will be resolved with `data`. The data will be automatically\ndecoded based on its encoding. If the encoding of the part is not supported, an error will occur.\n\n- **deleteMessage**(<*mixed*> uid, [<*function*> callback]) - *Promise* - Deletes the specified\nmessage(s).  `uid` is the *uid* of the message you want to add the flag to or an array of  *uids*.  \nWhen completed, either calls the provided callback with signature `(err)`, or resolves the returned promise.\n\n- **moveMessage**(<*mixed*> source, <*string*> boxName, [<*function*> callback]) - *Promise* - Moves the specified\nmessage(s) in the currently open mailbox to another mailbox. `source` corresponds to a node-imap *MessageSource* which\nspecifies the messages to be moved. When completed, either calls the provided callback with signature `(err)`, or\nresolves the returned promise.\n\n- **openBox**(<*string*> boxName, [<*function*> callback]) - *Promise* - Open a mailbox, calling the provided callback\nwith signature `(err, boxName)`, or resolves the returned promise with `boxName`.\n\n- **closeBox**(<*boolean*> [autoExpunge = true], [<*function*> callback]) - *Promise* - Close a mailbox, calling the provided callback\nwith signature `(err)`, or resolves the returned promise. If autoExpunge is true, any messages marked as Deleted in the currently \nopen mailbox will be removed.\n\n- **addBox**(<*string*> boxName, [<*function*> callback]) - *Promise* - Create a mailbox, calling the provided callback\nwith signature `(err, boxName)`, or resolves the returned promise with `boxName`.\n\n- **delBox**(<*string*> boxName, [<*function*> callback]) - *Promise* - Delete a mailbox, calling the provided callback\nwith signature `(err, boxName)`, or resolves the returned promise with `boxName`.\n\n- **search**(<*object*> searchCriteria, [<*object*> fetchOptions], [<*function*> callback]) - *Promise* - Search for and\nretrieve mail in the currently open mailbox. The search is performed based on the provided `searchCriteria`, which is\nthe exact same format as [node-imap][] requires. All results will be subsequently downloaded, according to the options\nprovided by `fetchOptions`, which are also identical to those passed to `fetch` of [node-imap][]. Upon a successful\nsearch+fetch operation, either the provided callback will be called with signature `(err, results)`, or the returned\npromise will be resolved with `results`. The format of `results` is detailed below. See node-imap's *ImapMessage*\nsignature for information about `attributes`, `which`, `size`, and `body`. For any message part that is a `HEADER`, the\nbody is automatically parsed into an object.\n    ```js\n        // [{\n        //      attributes: object,\n        //      parts: [ { which: string, size: number, body: string }, ... ]\n        //  }, ...]\n    ```\n\n## Server events\nFunctions to listen to server events are configured in the configuration object that is passed to the `connect` function.\nImapSimple only implements a subset of the server event functions that *node-imap* supports, [see here](https://github.com/mscdex/node-imap#connection-events),\nwhich are `mail`, `expunge` and `update`. Add them to the configuration object as follows:\n\n```\nvar config = {\n    imap: {\n        ...\n    },\n    onmail: function (numNewMail) {\n      ...\n    },\n    onexpunge: function (seqno) {\n        ...\n    },\n    onupdate: function (seqno, info) {\n        ...\n    }\n};\n```\n\nFor more information [see here](https://github.com/mscdex/node-imap#connection-events).\n\n## Contributing\nPull requests welcome! This project really needs tests, so those would be very welcome. If you have a use case you want\nsupported, please feel free to add, but be sure to follow the patterns established thus far, mostly:\n\n- support promises **AND** callbacks\n- make your api as simple as possible\n- don't worry about exposing implementation details of [node-imap][] when needed\n\nThis project is **OPEN** open source. See [CONTRIBUTING.md](CONTRIBUTING.md) for more details about contributing.\n\n## Semver\nThis project follows [semver](http://semver.org/). Namely:\n\n- new MAJOR versions when incompatible API changes are made,\n- new MINOR versions for backwards-compatible feature additions,\n- new PATCH versions for backwards-compatible bug fixes\n\n## License\n[MIT](LICENSE-MIT)\n\n[node-imap]: https://github.com/mscdex/node-imap\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chadxz/imap-simple.git"
  },
  "scripts": {
    "cover": "istanbul cover --report html _mocha",
    "lint": "jscs . && jshint .",
    "test": "mocha"
  },
  "version": "5.0.0"
}
